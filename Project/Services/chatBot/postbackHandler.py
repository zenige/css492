from Project.Services.chatBot import templateMessage,chatService
from datetime import datetime
from Project.Services.ImageClassifly import predict

import webbrowser
def stateHandler(**kwargs):
    # if kwargs['postback']['postback'] == 'a':
    #     # return webbrowser.open('https://liff.line.me/1655993001-QLqyKnVe')
    #     print("SSSS")
    print("kwargs",kwargs)

    #customer_define = customer_collection.find_one({'$and':[{"userID": kwargs['sender_id']},{"botID": ObjectId(kwargs['botID'])}]})
    res = {"message": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö"}
    if 'postback' in kwargs.keys():
        commands = kwargs['postback']['postback'].split("&")
        action = commands[0].split("=")
        state = commands[1].split("=")
        print(action)
        print(state)
        if(action[1] == 'start'):
            if(state[1] == 'start'):
                return {"message":"üì∑ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ô‡∏≥‡πÑ‡∏õ‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö \n\n‚ú® (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏£‡∏π‡∏õ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) ‚ú®   \n\n‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üòÑ"}
        elif(action[1] == 'seeMore'):
            if(state[1] == 'seeMore'):
                return templateMessage.seeMoreMessage()
            if(state[1] == 'eczema'):
                return templateMessage.seeMoreEczema()
            elif(state[1] == 'atopic'):
                return templateMessage.seeMoreAtopic()
            elif(state[1] == 'ringworm'):
                return templateMessage.seeMoreRingworm()
        elif(action[1] == 'moreDetail'):
            return templateMessage.moreDetailTreatment(state[1])
        elif(action[1] == 'moreDetailTreat'):
            substate = commands[2].split("=")
            print(substate)
            if substate[1] =='reason':
                return templateMessage.moreDetailTreatReason(state[1])
            elif substate[1] == 'treatSelf':
                return templateMessage.moreDetailTreatSelf(state[1])
            elif substate[1] == 'med':
                return templateMessage.moreDetailMed(state[1])
            elif substate[1] == 'prod':
                return templateMessage.moreDetailProd(state[1])
            elif substate[1] =='symptom':
                return templateMessage.moreDetailSymptom(state[1])
        elif(action[1] == 'medDetail'):
            return chatService.medHandler(state[1])
        # elif(action[1] == 'startDoc'):
        #     return 
            


    if 'image' in kwargs.keys():
        now = datetime.now()
        message_content = kwargs['line_bot_api'].get_message_content(kwargs['image']['imageId'])
        print(message_content)
        with open("./static/img/"+kwargs['sender_id']+'&&'+str(now)+".jpg", 'wb') as fd:
            for chunk in message_content.iter_content():
                fd.write(chunk)
        res = predict.predictImage("./static/img/"+kwargs['sender_id']+'&&'+str(now)+".jpg",kwargs['sender_id'])
       
    # elif 'postback' in kwargs.keys():
    #     res = commandsHandler(commands = kwargs['postback'], sender_id = kwargs['sender_id'], botID=kwargs['botID'])
    return res

